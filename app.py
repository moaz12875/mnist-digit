# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hYD6z8Baz8Hl3zkH7YBZRdeEqKDflflZ
"""

from google.colab import files
uploaded = files.upload()

import gradio as gr
import tensorflow as tf
import numpy as np

try:
    model = tf.keras.models.load_model('keras.model')
    print("Model loaded successfully!")
except Exception as e:
    print(f"Error loading model: {e}")

# دالة التوقع
def predict_image(image):
    # تحويل الصورة إلى تدرج رمادي (grayscale) إذا كانت ملونة
    if image.shape[2] == 4: # RGBA
        image = image[:, :, :3]
    if image.shape[2] == 3: # RGB
        image = np.dot(image[...,:3], [0.2989, 0.5870, 0.1140])

    # عكس الألوان (الأبيض يصبح أسود)
    image = 255 - image

    # تغيير حجم الصورة إلى 28x28 بكسل
    image = tf.image.resize(np.expand_dims(image, axis=-1), (28, 28))

    # تطبيع البيانات (تحويل القيم إلى نطاق من 0 إلى 1)
    image = image / 255.0

    # إضافة بُعد batch
    image = np.expand_dims(image, axis=0)

    # التنبؤ باستخدام الموديل
    prediction = model.keras.predict(image)
    predicted_class = np.argmax(prediction)

    return f"الرقم المتوقع هو: {predicted_class}"

# إنشاء واجهة Gradio
iface = gr.Interface(
    fn=predict_image,
    inputs=gr.Sketchpad(
        type="numpy",
        image_mode="L",
        label="ارسم رقمًا هنا",
        show_label=True, # لجعل الرسم باللون الأسود على خلفية بيضاء
    ),
outputs="text",
title="تطبيق التعرف على الأرقام (MNIST)",
description="ارسم رقمًا من 0 إلى 9 في اللوحة، وسيتوقع الموديل الرقم الذي رسمته. ✍"
)

# تشغيل التطبيق
iface.launch(share=True)